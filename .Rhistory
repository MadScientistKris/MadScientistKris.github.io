}
clusterGrid(CentersPairs, varNames, 1, 2)
remove(plotList)
remove(plots)
remove(combinedTable)
clusterGrid <-  function(clusterList, varNames, start, end)
{
Start <- as.numeric(start)
End <- as.numeric(end)
numPeriod = End - Start + 1
validate(need(Start <= End, "Start period must be no later than End period"))
combinedTable <- lapply(Start:End, function(i) clusterList[[i]])
plotList = gridPlot(combinedTable, varNames, numPeriod)
m = matrix(1:49, 7, 7,byrow = T)
#do.call("grid.arrange", c(plotList, ncol = 7, nrow = 7, top = sprintf('Segment Movement from period %d to %d', Start, End)))
#do.call("grid.arrange", c(grobs = plotList, layout_matrix = m,
#                         top = sprintf('Segment Movement from period %d to %d', Start, End)))
grid.arrange(grobs = plotList, layout_matrix = m, top = sprintf('Segment Movement from period %d to %d', Start, End))
}
clusterGrid(CentersPairs, varNames, 1, 2)
length(varNames)
gridPlot <-  function(combinedTable, varName, numPeriod){
# Plot the grid of centroid movement
# Input:
#   combinedTable: a list of tables which are centroids information for selected periods
#   varName: 7 variable names of the centroids
#   numPeriod: number of arrows that need to add in the plot. i.e, if the chosen period is 3-5, then the numPeriod is 2 (3 to 4, 4 to 5)
# Output
#   a list of 49 plots for all combinations of the variables.
plotList <- list()
len <- length(varName)
for (i in 1:len){
for (j in 1:len){
if (i == j){
index <- (i - 1) * len + j
plotList[[index]] <- textGrob(sprintf('%s', varName[i]))  # draw a text graph when choosing the same variable.
}
else{
table_IJ <- lapply(combinedTable, function(ii) ii[c(1,i+1,j+1)])
table_IJ <- do.call(cbind, table_IJ)
g_point = ''
Segment = 0.8/(numPeriod - 1)
for (a in 1:numPeriod){
# change columns names
names(table_IJ)[2+(a-1)*3] <- sprintf('y%d',a)
names(table_IJ)[3+(a-1)*3] <- sprintf('x%d',a)
g_point = sprintf(paste(g_point, "geom_point(aes_string(y = 'y%d', x = 'x%d'), alpha = %f, size = 1, position = 'jitter') +"),
a,a,0.2+(a-1)*Segment)
}
g_segment = ''
for (b in 1:(numPeriod-1)){
g_segment = sprintf(paste(g_segment, "geom_segment(aes_string(y = 'y%d', x = 'x%d', yend = 'y%d',
xend = 'x%d'), linetype=2, arrow = arrow(length = unit(0.1, 'cm')), size = 0.1) +"),
b, b, b+1, b+1)
}
Expression <- paste('ggplot(table_IJ, aes(color = as.factor(segment), label = segment)) +',
g_point,
g_segment,
'theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +',
"scale_color_discrete(guide = FALSE)")
index <- (i - 1) * len + j
plotList[[index]] = eval(parse(text = Expression))
}
}
}
return(plotList)
}
clusterGrid <-  function(clusterList, varNames, start, end)
{
Start <- as.numeric(start)
End <- as.numeric(end)
numPeriod = End - Start + 1
validate(need(Start <= End, "Start period must be no later than End period"))
combinedTable <- lapply(Start:End, function(i) clusterList[[i]])
plotList = gridPlot(combinedTable, varNames, numPeriod)
m = matrix(1:49, 7, 7,byrow = T)
grid.arrange(grobs = plotList, layout_matrix = m, top = sprintf('Segment Movement from period %d to %d', Start, End))
}
clusterGrid(CentersPairs, varNames, 1, 2)
m
0 % 8
3%8
3%%8
0 %% 8
1 %% 8
a = list()
a[[1]]=3
a[[3]]=5
a
sapply(a,is.null)
a[~sapply(a,is.null)]
a[!sapply(a,is.null)]
nullGrob()
a = Null
null
NULL
gridPlot <-  function(combinedTable, varName, numPeriod){
# Plot the grid of centroid movement
# Input:
#   combinedTable: a list of tables which are centroids information for selected periods
#   varName: 7 variable names of the centroids
#   numPeriod: number of arrows that need to add in the plot. i.e, if the chosen period is 3-5, then the numPeriod is 2 (3 to 4, 4 to 5)
# Output
#   a list of 49 plots for all combinations of the variables.
plotList <- list()
len <- length(varName)
for (i in 1:len){
for (j in 1:len){
if (i == j){
index <- (i - 1) * len + j
plotList[[index]] <- textGrob(sprintf('%s', varName[i]))  # draw a text graph when choosing the same variable.
}
else if(i > j){
table_IJ <- lapply(combinedTable, function(ii) ii[c(1,i+1,j+1)])
table_IJ <- do.call(cbind, table_IJ)
g_point = ''
Segment = 0.8/(numPeriod - 1)
for (a in 1:numPeriod){
# change columns names
names(table_IJ)[2+(a-1)*3] <- sprintf('y%d',a)
names(table_IJ)[3+(a-1)*3] <- sprintf('x%d',a)
g_point = sprintf(paste(g_point, "geom_point(aes_string(y = 'y%d', x = 'x%d'), alpha = %f, size = 1, position = 'jitter') +"),
a,a,0.2+(a-1)*Segment)
}
g_segment = ''
for (b in 1:(numPeriod-1)){
g_segment = sprintf(paste(g_segment, "geom_segment(aes_string(y = 'y%d', x = 'x%d', yend = 'y%d',
xend = 'x%d'), linetype=2, arrow = arrow(length = unit(0.1, 'cm')), size = 0.1) +"),
b, b, b+1, b+1)
}
Expression <- paste('ggplot(table_IJ, aes(color = as.factor(segment), label = segment)) +',
g_point,
g_segment,
'theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +',
"scale_color_discrete(guide = FALSE)")
index <- (i - 1) * len + j
plotList[[index]] = eval(parse(text = Expression))
}
else{
index <- (i - 1) * len + j
plotList[[index]] = NULL
}
}
}
return(plotList)
}
m = matrix(NA, 7, 7)
m
higher.tri(m, diag = T)
lower.tri(m, diag = T)
upper.tri(m, diag = T)
len = length(varNames)
len
m[upper.tri(m, diag = TRUE)] <- 1:len*(len+1)/2
m
m = matrix(NA, 7, 7)
len = length(varNames)
m[upper.tri(m, diag = TRUE)] <- 1:(len*(len+1)/2)
m
m <- matrix(NA, 4, 4)
m[lower.tri(m, diag = T)] <- 1:10
m
m <- matrix(NA, 4, 4)
m[upper.tri(m, diag = T)] <- 1:10
m
m[upper.tri(m, diag = TRUE)]
?upper.tri()
upper.tri(m, diag = TRUE)
m <- matrix(NA, 4, 4)
m[lower.tri(m, diag = T)] <- 1:10
m
gridPlot <-  function(combinedTable, varName, numPeriod){
# Plot the grid of centroid movement
# Input:
#   combinedTable: a list of tables which are centroids information for selected periods
#   varName: 7 variable names of the centroids
#   numPeriod: number of arrows that need to add in the plot. i.e, if the chosen period is 3-5, then the numPeriod is 2 (3 to 4, 4 to 5)
# Output
#   a list of 49 plots for all combinations of the variables.
plotList <- list()
len <- length(varName)
for (i in 1:len){
for (j in 1:len){
if (i == j){
index <- (i - 1) * len + j
plotList[[index]] <- textGrob(sprintf('%s', varName[i]))  # draw a text graph when choosing the same variable.
}
else if(i < j){
table_IJ <- lapply(combinedTable, function(ii) ii[c(1,i+1,j+1)])
table_IJ <- do.call(cbind, table_IJ)
g_point = ''
Segment = 0.8/(numPeriod - 1)
for (a in 1:numPeriod){
# change columns names
names(table_IJ)[2+(a-1)*3] <- sprintf('y%d',a)
names(table_IJ)[3+(a-1)*3] <- sprintf('x%d',a)
g_point = sprintf(paste(g_point, "geom_point(aes_string(y = 'y%d', x = 'x%d'), alpha = %f, size = 1, position = 'jitter') +"),
a,a,0.2+(a-1)*Segment)
}
g_segment = ''
for (b in 1:(numPeriod-1)){
g_segment = sprintf(paste(g_segment, "geom_segment(aes_string(y = 'y%d', x = 'x%d', yend = 'y%d',
xend = 'x%d'), linetype=2, arrow = arrow(length = unit(0.1, 'cm')), size = 0.1) +"),
b, b, b+1, b+1)
}
Expression <- paste('ggplot(table_IJ, aes(color = as.factor(segment), label = segment)) +',
g_point,
g_segment,
'theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +',
"scale_color_discrete(guide = FALSE)")
index <- (i - 1) * len + j
plotList[[index]] = eval(parse(text = Expression))
}
else{
index <- (i - 1) * len + j
plotList[[index]] = NULL
}
}
}
return(plotList)
}
m = matrix(NA, 7, 7)
len = length(varNames)
m[lower.tri(m, diag = TRUE)] <- 1:(len*(len+1)/2)
m
t(m)
gridPlot <-  function(combinedTable, varName, numPeriod){
# Plot the grid of centroid movement
# Input:
#   combinedTable: a list of tables which are centroids information for selected periods
#   varName: 7 variable names of the centroids
#   numPeriod: number of arrows that need to add in the plot. i.e, if the chosen period is 3-5, then the numPeriod is 2 (3 to 4, 4 to 5)
# Output
#   a list of 49 plots for all combinations of the variables.
plotList <- list()
len <- length(varName)
for (i in 1:len){
for (j in 1:len){
if (i == j){
index <- (i - 1) * len + j
plotList[[index]] <- textGrob(sprintf('%s', varName[i]))  # draw a text graph when choosing the same variable.
}
else if(i > j){
table_IJ <- lapply(combinedTable, function(ii) ii[c(1,i+1,j+1)])
table_IJ <- do.call(cbind, table_IJ)
g_point = ''
Segment = 0.8/(numPeriod - 1)
for (a in 1:numPeriod){
# change columns names
names(table_IJ)[2+(a-1)*3] <- sprintf('y%d',a)
names(table_IJ)[3+(a-1)*3] <- sprintf('x%d',a)
g_point = sprintf(paste(g_point, "geom_point(aes_string(y = 'y%d', x = 'x%d'), alpha = %f, size = 1, position = 'jitter') +"),
a,a,0.2+(a-1)*Segment)
}
g_segment = ''
for (b in 1:(numPeriod-1)){
g_segment = sprintf(paste(g_segment, "geom_segment(aes_string(y = 'y%d', x = 'x%d', yend = 'y%d',
xend = 'x%d'), linetype=2, arrow = arrow(length = unit(0.1, 'cm')), size = 0.1) +"),
b, b, b+1, b+1)
}
Expression <- paste('ggplot(table_IJ, aes(color = as.factor(segment), label = segment)) +',
g_point,
g_segment,
'theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +',
"scale_color_discrete(guide = FALSE)")
index <- (i - 1) * len + j
plotList[[index]] = eval(parse(text = Expression))
}
else{
index <- (i - 1) * len + j
plotList[[index]] = NULL
}
}
}
return(plotList)
}
plotList = plotList
m = matrix(NA, 7, 7)
len = length(varNames)
m[lower.tri(m, diag = TRUE)] <- 1:(len*(len+1)/2)
m = t(m)
m
gridPlot <-  function(combinedTable, varName, numPeriod){
# Plot the grid of centroid movement
# Input:
#   combinedTable: a list of tables which are centroids information for selected periods
#   varName: 7 variable names of the centroids
#   numPeriod: number of arrows that need to add in the plot. i.e, if the chosen period is 3-5, then the numPeriod is 2 (3 to 4, 4 to 5)
# Output
#   a list of 49 plots for all combinations of the variables.
plotList <- list()
len <- length(varName)
for (i in 1:len){
for (j in 1:len){
if (i == j){
index <- (i - 1) * len + j
plotList[[index]] <- textGrob(sprintf('%s', varName[i]))  # draw a text graph when choosing the same variable.
}
else if(i > j){
table_IJ <- lapply(combinedTable, function(ii) ii[c(1,i+1,j+1)])
table_IJ <- do.call(cbind, table_IJ)
g_point = ''
Segment = 0.8/(numPeriod - 1)
for (a in 1:numPeriod){
# change columns names
names(table_IJ)[2+(a-1)*3] <- sprintf('y%d',a)
names(table_IJ)[3+(a-1)*3] <- sprintf('x%d',a)
g_point = sprintf(paste(g_point, "geom_point(aes_string(y = 'y%d', x = 'x%d'), alpha = %f, size = 1, position = 'jitter') +"),
a,a,0.2+(a-1)*Segment)
}
g_segment = ''
for (b in 1:(numPeriod-1)){
g_segment = sprintf(paste(g_segment, "geom_segment(aes_string(y = 'y%d', x = 'x%d', yend = 'y%d',
xend = 'x%d'), linetype=2, arrow = arrow(length = unit(0.1, 'cm')), size = 0.1) +"),
b, b, b+1, b+1)
}
Expression <- paste('ggplot(table_IJ, aes(color = as.factor(segment), label = segment)) +',
g_point,
g_segment,
'theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +',
"scale_color_discrete(guide = FALSE)")
index <- (i - 1) * len + j
plotList[[index]] = eval(parse(text = Expression))
}
else{
index <- (i - 1) * len + j
plotList[[index]] = NULL
}
}
}
return(plotList)
}
clusterGrid <-  function(clusterList, varNames, start, end){
Start <- as.numeric(start)
End <- as.numeric(end)
numPeriod = End - Start + 1
validate(need(Start <= End, "Start period must be no later than End period"))
combinedTable <- lapply(Start:End, function(i) clusterList[[i]])
plotList = gridPlot(combinedTable, varNames, numPeriod)
plotList = plotList[!sapply(plotList, is.null)]
m = matrix(NA, 7, 7)
len = length(varNames)
m[lower.tri(m, diag = TRUE)] <- 1:(len*(len+1)/2)
m = t(m)
grid.arrange(grobs = plotList, layout_matrix = m, top = sprintf('Segment Movement from period %d to %d', Start, End))
}
clusterGrid(CentersPairs, varNames, 1, 2)
m
debug(clusterGrid)
clusterGrid(CentersPairs, varNames, 1, 2)
lengt(plotList)
length(plotList)
plotList[1]
plotList[2]
plotList[8]
undebug(clusterGrid)
gridPlot <-  function(combinedTable, varName, numPeriod){
# Plot the grid of centroid movement
# Input:
#   combinedTable: a list of tables which are centroids information for selected periods
#   varName: 7 variable names of the centroids
#   numPeriod: number of arrows that need to add in the plot. i.e, if the chosen period is 3-5, then the numPeriod is 2 (3 to 4, 4 to 5)
# Output
#   a list of 49 plots for all combinations of the variables.
plotList <- list()
len <- length(varName)
for (i in 1:len){
for (j in 1:len){
if (i == j){
index <- (i - 1) * len + j
plotList[[index]] <- textGrob(sprintf('%s', varName[i]))  # draw a text graph when choosing the same variable.
}
else if(i < j){
table_IJ <- lapply(combinedTable, function(ii) ii[c(1,i+1,j+1)])
table_IJ <- do.call(cbind, table_IJ)
g_point = ''
Segment = 0.8/(numPeriod - 1)
for (a in 1:numPeriod){
# change columns names
names(table_IJ)[2+(a-1)*3] <- sprintf('y%d',a)
names(table_IJ)[3+(a-1)*3] <- sprintf('x%d',a)
g_point = sprintf(paste(g_point, "geom_point(aes_string(y = 'y%d', x = 'x%d'), alpha = %f, size = 1, position = 'jitter') +"),
a,a,0.2+(a-1)*Segment)
}
g_segment = ''
for (b in 1:(numPeriod-1)){
g_segment = sprintf(paste(g_segment, "geom_segment(aes_string(y = 'y%d', x = 'x%d', yend = 'y%d',
xend = 'x%d'), linetype=2, arrow = arrow(length = unit(0.1, 'cm')), size = 0.1) +"),
b, b, b+1, b+1)
}
Expression <- paste('ggplot(table_IJ, aes(color = as.factor(segment), label = segment)) +',
g_point,
g_segment,
'theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +',
"scale_color_discrete(guide = FALSE)")
index <- (i - 1) * len + j
plotList[[index]] = eval(parse(text = Expression))
}
else{
index <- (i - 1) * len + j
plotList[[index]] = NULL
}
}
}
return(plotList)
}
clusterGrid <-  function(clusterList, varNames, start, end){
Start <- as.numeric(start)
End <- as.numeric(end)
numPeriod = End - Start + 1
validate(need(Start <= End, "Start period must be no later than End period"))
combinedTable <- lapply(Start:End, function(i) clusterList[[i]])
plotList = gridPlot(combinedTable, varNames, numPeriod)
plotList = plotList[!sapply(plotList, is.null)]
m = matrix(NA, 7, 7)
len = length(varNames)
m[lower.tri(m, diag = TRUE)] <- 1:(len*(len+1)/2)
m = t(m)
grid.arrange(grobs = plotList, layout_matrix = m, top = sprintf('Segment Movement from period %d to %d', Start, End))
}
clusterGrid(CentersPairs, varNames, 1, 2)
source('Intern/cpt/radiator/visualization/R scripts/functions.R')
source('Intern/cpt/radiator/visualization/R scripts/functions.R')
server <- function(input, output){
TsPlotData <- reactive({
getDataForTsPlots(Customer, data.frame('month' = c(1:6)), as.numeric(input$CustomerID))
})
output$plotCenter <- renderPlot({clusterPlot(CentersPairs,
'sales360','pConvGrowth',
input$start, input$end)})
output$centerGrid <- renderPlot({
clusterGrid(CentersPairs, varNames, input$start, input$end)
})
output$cucTs <- renderPlot({
warehouseId <- as.numeric(input$warehouse)
validate(need(warehouseId %in% QuoteSale$WH, "Warehouse does not exist"))
subData <- QuoteSale[J(warehouseId),]
ggplot(subData, aes(date, QuoteSalesPrice)) +
geom_point(aes(shape = as.factor(sold), colour = as.factor(sold))) +
scale_x_date(breaks = date_breaks("3 months"),labels = date_format("%b-%y")) +
scale_shape_manual(name = 'Sold', values = c(4,1), labels = c('Not','Yes')) +
scale_color_manual(name = 'Sold', values = c('red','black'), labels = c('Not','Yes'))+
ggtitle(sprintf('Price of CUC in warehouse %s', input$warehouse)) +
theme(plot.title = element_text(colour = 'blue', size = 12, face = 'bold', hjust = 0.5), panel.grid.major = element_line(colour=NA))
})
output$cucTarget <- renderPlot({
CurrentPrice <- data.frame('Price' = unique(CurrentTarget$CurrentPrice), 'type' = rep('Current',length(unique(CurrentTarget$CurrentPrice))))
TargetPrice <- CurrentTarget[, .(Price = mean(TargetPrice)), by = TargetSegmentID]
TargetPrice <- TargetPrice[, type:=rep('Target', nrow(TargetPrice))]
ggplot(CurrentPrice) +
geom_point(aes(type, Price), shape = 0, size = 1) +
geom_point(data = TargetPrice, aes(type, Price, colour = as.factor(TargetSegmentID)), shape = 15, size = 2) +
scale_color_discrete(name = 'SegmentID') +
ggtitle('Current Customer Price vs Target Segment Price') +
theme(plot.title = element_text(colour = 'blue', size = 12, face = 'bold', hjust = 0.5), panel.grid.major = element_line(colour=NA))
})
output$tsPrice <- renderDygraph({
tsPlots(TsPlotData(),type = 'price')
})
output$tsConversion <- renderDygraph({
tsPlots(TsPlotData(),type = 'conversion')
})
output$tsRevenue <- renderDygraph({
tsPlots(TsPlotData(),type = 'revenue')
})
output$tsQty <- renderDygraph({
tsPlots(TsPlotData(),type = 'qtySold')
})
}
shinyApp(ui = ui, server = server )
setwd('~')
setwd('MadScientistKris.github.io/')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
setwd('~')
setwd('MadScientistKris.github.io/')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
setwd('~')
setwd('mad.io/')
blogdown::serve_site()
blogdown::serve_site()
cd
setwd('~')
setwd('MadScientistKris.github.io/')
blogdown::serve_site()
